/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/credits/": {
    get: operations["api_credits_list"];
    post: operations["api_credits_create"];
  };
  "/api/credits/{credit_id}/": {
    get: operations["api_credits_retrieve"];
  };
  "/api/credits/{credit_id}/update/": {
    post: operations["api_credits_update_create"];
  };
  "/api/credits/{credit_id}/void/": {
    post: operations["api_credits_void_create"];
  };
  "/api/customer_feature_access/": {
    /** @deprecated */
    get: operations["api_customer_feature_access_list"];
  };
  "/api/customer_metric_access/": {
    /** @deprecated */
    get: operations["api_customer_metric_access_list"];
  };
  "/api/customers/": {
    get: operations["api_customers_list"];
    post: operations["api_customers_create"];
  };
  "/api/customers/{customer_id}/": {
    get: operations["api_customers_retrieve"];
  };
  "/api/customers/{customer_id}/delete/": {
    post: operations["api_customers_delete_create"];
  };
  "/api/feature_access/": {
    get: operations["api_feature_access_retrieve"];
  };
  "/api/invoices/": {
    get: operations["api_invoices_list"];
  };
  "/api/invoices/{invoice_id}/": {
    get: operations["api_invoices_retrieve"];
    patch: operations["api_invoices_partial_update"];
  };
  "/api/invoices/{invoice_id}/pdf_url/": {
    get: operations["api_invoices_pdf_url_retrieve"];
  };
  "/api/metric_access/": {
    get: operations["api_metric_access_retrieve"];
  };
  "/api/ping/": {
    /** @description Ping the API to check if the API key is valid. */
    get: operations["api_ping_retrieve"];
  };
  "/api/plans/": {
    get: operations["api_plans_list"];
  };
  "/api/plans/{plan_id}/": {
    get: operations["api_plans_retrieve"];
  };
  "/api/subscriptions/": {
    get: operations["api_subscriptions_list"];
    post: operations["api_subscriptions_create"];
  };
  "/api/subscriptions/{subscription_id}/": {
    get: operations["api_subscriptions_retrieve"];
  };
  "/api/subscriptions/{subscription_id}/addons/{addon_id}/cancel/": {
    post: operations["api_subscriptions_addons_cancel_create"];
  };
  "/api/subscriptions/{subscription_id}/addons/attach/": {
    post: operations["api_subscriptions_addons_attach_create"];
  };
  "/api/subscriptions/{subscription_id}/cancel/": {
    post: operations["api_subscriptions_cancel_create_2"];
  };
  "/api/subscriptions/{subscription_id}/components/{metric_id}/change_prepaid_units/": {
    post: operations["api_subscriptions_components_change_prepaid_units_create"];
  };
  "/api/subscriptions/{subscription_id}/switch_plan/": {
    post: operations["api_subscriptions_switch_plan_create"];
  };
  "/api/subscriptions/{subscription_id}/update/": {
    post: operations["api_subscriptions_update_create_2"];
  };
  "/api/subscriptions/add/": {
    /** @deprecated */
    post: operations["api_subscriptions_add_create"];
  };
  "/api/subscriptions/cancel/": {
    /** @deprecated */
    post: operations["api_subscriptions_cancel_create"];
  };
  "/api/subscriptions/update/": {
    post: operations["api_subscriptions_update_create"];
  };
  "/api/track/": {
    post: operations["api_track_create"];
  };
  "/api/verify_idems_received/": {
    post: operations["api_verify_idems_received_create"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    APIToken: {
      /** @description A free-form name for the API key. Need not be unique. 50 characters max. */
      name?: string;
      prefix: string;
      /**
       * Expires 
       * Format: date-time 
       * @description Once API key expires, clients cannot use it anymore.
       */
      expiry_date?: string | null;
      /** Format: date-time */
      created: string;
    };
    APITokenCreateResponse: {
      api_key: components["schemas"]["APIToken"];
      key: string;
    };
    APITokenRequest: {
      /** @description A free-form name for the API key. Need not be unique. 50 characters max. */
      name?: string;
      /**
       * Expires 
       * Format: date-time 
       * @description Once API key expires, clients cannot use it anymore.
       */
      expiry_date?: string | null;
    };
    APITokenRollResponse: {
      api_key: components["schemas"]["APIToken"];
      key: string;
    };
    AccessMethodsSubscriptionRecord: {
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      start_date: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      end_date: string;
      subscription_filters: (components["schemas"]["SubscriptionCategoricalFilter"])[];
      plan: components["schemas"]["LightweightPlanVersion"];
    };
    /** @description DRF serializer for :class:`~activity.models.Action`. */
    Action: {
      id: number;
      actor: string;
      verb: string;
      action_object: string;
      target: string;
      public?: boolean;
      description?: string | null;
      /** Format: date-time */
      timestamp?: string;
    };
    AddFeatureRequest: {
      /**
       * Format: uuid 
       * @description The feature_id of the feature you want to add to the plan.
       */
      feature_id: string;
    };
    AddFeatureResponse: {
      success: boolean;
      message: string;
    };
    AddFeatureToAddOnRequest: {
      /** @description The version_ids of the AddOn versions you want to add the feature to. If you want to apply to all versions, use the all_versions parameter. */
      version_ids?: (string)[];
      /**
       * Format: uuid 
       * @description The feature_id of the feature you want to add to the plan.
       */
      feature_id: string;
    };
    AddFeatureToAddOnResponse: {
      success: boolean;
      message: string;
    };
    AddFeatureToPlanRequest: {
      /** @description The version_ids of the plan versions you want to add the feature to. If you want to apply to all versions, use the all_versions parameter. */
      version_ids?: (string)[];
      /**
       * @description Whether or not to apply this feature to all versions of the feature. If you want to apply to specific versions, use the version_ids parameter. 
       * @default false
       */
      all_versions?: boolean;
      /**
       * Format: uuid 
       * @description The feature_id of the feature you want to add to the plan.
       */
      feature_id: string;
    };
    AddFeatureToPlanResponse: {
      success: boolean;
      message: string;
    };
    AddFeatureToPlanVersionNumberResponse: {
      success: boolean;
      message: string;
    };
    AddOnCreateRequest: {
      /** @description The name of the add-on plan. */
      addon_name: string;
      /** @description The description of the add-on plan. */
      addon_description: string;
      /** @description The initial version of the add-on plan. */
      initial_version: components["schemas"]["InitialAddOnVersionCreateRequest"];
    };
    AddOnDetail: {
      /** @description This addon's versions. */
      versions: (components["schemas"]["AddOnVersion"])[];
      /** @description The ID of the add-on plan. */
      addon_id: string;
      /** @description The description of the add-on plan. */
      addon_description: string;
      /** @description The name of the add-on plan. */
      addon_name: string;
    };
    AddOnSubscriptionRecord: {
      addon_subscription_id: string;
      customer: components["schemas"]["LightweightCustomer"];
      addon: components["schemas"]["LightweightAddOn"];
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      start_date: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      end_date: string;
      parent: components["schemas"]["LightweightSubscriptionRecord"];
      fully_billed: boolean;
      /** @description Whether the subscription automatically renews. Defaults to true. */
      auto_renew: boolean;
    };
    AddOnSubscriptionRecordCreateRequest: {
      /**
       * Format: uuid 
       * @description The add-on to be applied to the subscription.
       */
      addon_id?: string;
      /**
       * @description The quantity of the add-on to be applied to the subscription. Flat fees of add-ons will be multiplied by this quantity. Usage-based components of add-ons will be unaffected by the quantity. 
       * @default 1
       */
      quantity?: number;
    };
    AddOnUpdate: {
      addon_name?: string;
      /** Format: date-time */
      active_from?: string;
      /** Format: date-time */
      active_to?: string | null;
    };
    AddOnVersion: {
      recurring_charges: (components["schemas"]["RecurringCharge"])[];
      components: (components["schemas"]["PlanComponent"])[];
      features: (components["schemas"]["Feature"])[];
      /** @enum {string} */
      status: "active" | "retiring" | "grandfathered" | "deleted" | "inactive" | "not_started";
      /** @description Currency of the plan. Can only be null if the flat fee is 0 and all components are of type free. */
      currency: components["schemas"]["PricingUnit"];
      /** @description The number of active instances of this version of the add-on plan. */
      active_instances: number;
      /** @enum {unknown} */
      invoice_when: "invoice_on_attach" | "invoice_on_subscription_end";
      /** @enum {unknown} */
      billing_frequency: "one_time" | "recurring";
      /** @enum {string} */
      addon_type: "usage_based" | "flat";
    };
    AddOnVersionCreateRequest: {
      /** Format: uuid */
      addon_id: string;
      recurring_charges?: (components["schemas"]["RecurringChargeCreateRequest"])[] | null;
      components?: (components["schemas"]["PlanComponentCreateRequest"])[] | null;
      features?: (string)[];
      currency_code: string;
      /** @enum {unknown} */
      invoice_when: "invoice_on_attach" | "invoice_on_subscription_end";
      /** @enum {unknown} */
      billing_frequency: "one_time" | "recurring";
    };
    AddOnVersionDetail: {
      recurring_charges: (components["schemas"]["RecurringCharge"])[];
      components: (components["schemas"]["PlanComponent"])[];
      features: (components["schemas"]["Feature"])[];
      /** @enum {string} */
      status: "active" | "retiring" | "grandfathered" | "deleted" | "inactive" | "not_started";
      /** @description Currency of the plan. Can only be null if the flat fee is 0 and all components are of type free. */
      currency: components["schemas"]["PricingUnit"];
      /** @description The number of active instances of this version of the add-on plan. */
      active_instances: number;
      /** @enum {unknown} */
      invoice_when: "invoice_on_attach" | "invoice_on_subscription_end";
      /** @enum {unknown} */
      billing_frequency: "one_time" | "recurring";
      /** @enum {string} */
      addon_type: "usage_based" | "flat";
    };
    AddOnVersionUpdate: {
      addon_version_name?: string;
      /** Format: date-time */
      active_from?: string | null;
      /** Format: date-time */
      active_to?: string | null;
    };
    AddPlanTags: {
      tags?: (components["schemas"]["Tag"])[];
      success: boolean;
      message: string;
    };
    AddPlanTagsRequest: {
      tags?: (components["schemas"]["TagRequest"])[];
    };
    AddTargetCustomerResponse: {
      success: boolean;
      message: string;
    };
    Address: {
      /** @description City, district, suburb, town, or village */
      city: string;
      /**
       * @description Two-letter country code (ISO 3166-1 alpha-2) 
       * @enum {string}
       */
      country: "AW" | "AF" | "AO" | "AI" | "AX" | "AL" | "AD" | "AE" | "AR" | "AM" | "AS" | "AQ" | "TF" | "AG" | "AU" | "AT" | "AZ" | "BI" | "BE" | "BJ" | "BQ" | "BF" | "BD" | "BG" | "BH" | "BS" | "BA" | "BL" | "BY" | "BZ" | "BM" | "BO" | "BR" | "BB" | "BN" | "BT" | "BV" | "BW" | "CF" | "CA" | "CC" | "CH" | "CL" | "CN" | "CI" | "CM" | "CD" | "CG" | "CK" | "CO" | "KM" | "CV" | "CR" | "CU" | "CW" | "CX" | "KY" | "CY" | "CZ" | "DE" | "DJ" | "DM" | "DK" | "DO" | "DZ" | "EC" | "EG" | "ER" | "EH" | "ES" | "EE" | "ET" | "FI" | "FJ" | "FK" | "FR" | "FO" | "FM" | "GA" | "GB" | "GE" | "GG" | "GH" | "GI" | "GN" | "GP" | "GM" | "GW" | "GQ" | "GR" | "GD" | "GL" | "GT" | "GF" | "GU" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IM" | "IN" | "IO" | "IE" | "IR" | "IQ" | "IS" | "IL" | "IT" | "JM" | "JE" | "JO" | "JP" | "KZ" | "KE" | "KG" | "KH" | "KI" | "KN" | "KR" | "KW" | "LA" | "LB" | "LR" | "LY" | "LC" | "LI" | "LK" | "LS" | "LT" | "LU" | "LV" | "MO" | "MF" | "MA" | "MC" | "MD" | "MG" | "MV" | "MX" | "MH" | "MK" | "ML" | "MT" | "MM" | "ME" | "MN" | "MP" | "MZ" | "MR" | "MS" | "MQ" | "MU" | "MW" | "MY" | "YT" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NU" | "NL" | "NO" | "NP" | "NR" | "NZ" | "OM" | "PK" | "PA" | "PN" | "PE" | "PH" | "PW" | "PG" | "PL" | "PR" | "KP" | "PT" | "PY" | "PS" | "PF" | "QA" | "RE" | "RO" | "RU" | "RW" | "SA" | "SD" | "SN" | "SG" | "GS" | "SH" | "SJ" | "SB" | "SL" | "SV" | "SM" | "SO" | "PM" | "RS" | "SS" | "ST" | "SR" | "SK" | "SI" | "SE" | "SZ" | "SX" | "SC" | "SY" | "TC" | "TD" | "TG" | "TH" | "TJ" | "TK" | "TM" | "TL" | "TO" | "TT" | "TN" | "TR" | "TV" | "TW" | "TZ" | "UG" | "UA" | "UM" | "UY" | "US" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "YE" | "ZA" | "ZM" | "ZW";
      /** @description Address line 1 (e.g., street, PO Box, or company name) */
      line1: string;
      /** @description Address line 2 (e.g., apartment, suite, unit, or building) */
      line2?: string | null;
      /** @description ZIP or postal code */
      postal_code: string;
      /** @description State, county, province, or region */
      state?: string | null;
    };
    AddressRequest: {
      /** @description City, district, suburb, town, or village */
      city: string;
      /**
       * @description Two-letter country code (ISO 3166-1 alpha-2) 
       * @enum {string}
       */
      country: "AW" | "AF" | "AO" | "AI" | "AX" | "AL" | "AD" | "AE" | "AR" | "AM" | "AS" | "AQ" | "TF" | "AG" | "AU" | "AT" | "AZ" | "BI" | "BE" | "BJ" | "BQ" | "BF" | "BD" | "BG" | "BH" | "BS" | "BA" | "BL" | "BY" | "BZ" | "BM" | "BO" | "BR" | "BB" | "BN" | "BT" | "BV" | "BW" | "CF" | "CA" | "CC" | "CH" | "CL" | "CN" | "CI" | "CM" | "CD" | "CG" | "CK" | "CO" | "KM" | "CV" | "CR" | "CU" | "CW" | "CX" | "KY" | "CY" | "CZ" | "DE" | "DJ" | "DM" | "DK" | "DO" | "DZ" | "EC" | "EG" | "ER" | "EH" | "ES" | "EE" | "ET" | "FI" | "FJ" | "FK" | "FR" | "FO" | "FM" | "GA" | "GB" | "GE" | "GG" | "GH" | "GI" | "GN" | "GP" | "GM" | "GW" | "GQ" | "GR" | "GD" | "GL" | "GT" | "GF" | "GU" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IM" | "IN" | "IO" | "IE" | "IR" | "IQ" | "IS" | "IL" | "IT" | "JM" | "JE" | "JO" | "JP" | "KZ" | "KE" | "KG" | "KH" | "KI" | "KN" | "KR" | "KW" | "LA" | "LB" | "LR" | "LY" | "LC" | "LI" | "LK" | "LS" | "LT" | "LU" | "LV" | "MO" | "MF" | "MA" | "MC" | "MD" | "MG" | "MV" | "MX" | "MH" | "MK" | "ML" | "MT" | "MM" | "ME" | "MN" | "MP" | "MZ" | "MR" | "MS" | "MQ" | "MU" | "MW" | "MY" | "YT" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NU" | "NL" | "NO" | "NP" | "NR" | "NZ" | "OM" | "PK" | "PA" | "PN" | "PE" | "PH" | "PW" | "PG" | "PL" | "PR" | "KP" | "PT" | "PY" | "PS" | "PF" | "QA" | "RE" | "RO" | "RU" | "RW" | "SA" | "SD" | "SN" | "SG" | "GS" | "SH" | "SJ" | "SB" | "SL" | "SV" | "SM" | "SO" | "PM" | "RS" | "SS" | "ST" | "SR" | "SK" | "SI" | "SE" | "SZ" | "SX" | "SC" | "SY" | "TC" | "TD" | "TG" | "TH" | "TJ" | "TK" | "TM" | "TL" | "TO" | "TT" | "TN" | "TR" | "TV" | "TW" | "TZ" | "UG" | "UA" | "UM" | "UY" | "US" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "YE" | "ZA" | "ZM" | "ZW";
      /** @description Address line 1 (e.g., street, PO Box, or company name) */
      line1: string;
      /** @description Address line 2 (e.g., apartment, suite, unit, or building) */
      line2?: string | null;
      /** @description ZIP or postal code */
      postal_code: string;
      /** @description State, county, province, or region */
      state?: string | null;
    };
    AllSubstitutionResults: {
      substitution_results?: (components["schemas"]["SingleSubstitution"])[];
      /** Format: double */
      original_plans_revenue?: number;
      /** Format: double */
      new_plans_revenue?: number;
      /** Format: double */
      pct_revenue_change?: number | null;
    };
    BacktestCreate: {
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      kpis: ("total_revenue")[];
      backtest_name: string;
    };
    BacktestCreateRequest: {
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      substitutions: (components["schemas"]["BacktestSubstitutionMultiRequest"])[];
      kpis: ("total_revenue")[];
      backtest_name: string;
    };
    BacktestDetail: {
      backtest_id: string;
      backtest_name: string;
      backtest_substitutions: (components["schemas"]["BacktestSubstitution"])[];
      /** Format: date-time */
      time_created?: string;
      /** Format: date */
      start_date: string;
      kpis?: {
        [key: string]: unknown | undefined;
      };
      backtest_results: components["schemas"]["AllSubstitutionResults"];
      /** @enum {string} */
      status?: "running" | "completed" | "failed";
      /** Format: date */
      end_date: string;
    };
    BacktestSubstitution: {
      new_plan: components["schemas"]["PlanVersionDetail"];
      original_plan: components["schemas"]["PlanVersionDetail"];
    };
    BacktestSubstitutionMulti: {
      /** Format: uuid */
      new_plan: string;
      original_plans: (string)[];
    };
    BacktestSubstitutionMultiRequest: {
      /** Format: uuid */
      new_plan: string;
      original_plans: (string)[];
    };
    BacktestSummary: {
      backtest_name: string;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      /** Format: date-time */
      time_created?: string;
      kpis?: {
        [key: string]: unknown | undefined;
      };
      /** @enum {string} */
      status?: "running" | "completed" | "failed";
      backtest_id: string;
    };
    BatchEventRequest: {
      batch: (components["schemas"]["EventRequest"])[];
    };
    CategoricalFilter: {
      property_name: string;
      /** @enum {string} */
      operator: "isin" | "isnotin";
      comparison_value: (string)[];
    };
    CategoricalFilterDetailRequest: {
      property_name: string;
      /** @enum {string} */
      operator: "isin" | "isnotin";
      comparison_value: (string)[];
    };
    CategoricalFilterRequest: {
      property_name: string;
      /** @enum {string} */
      operator: "isin" | "isnotin";
      comparison_value: (string)[];
    };
    ChangeActiveDateResponse: {
      success: boolean;
      message: string;
    };
    ChangeActiveDatesRequest: {
      /** @description The version_ids of the plan versions you want to add the feature to. If you want to apply to all versions, use the all_versions parameter. */
      version_ids?: (string)[];
      /**
       * @description Whether or not to apply this feature to all versions of the feature. If you want to apply to specific versions, use the version_ids parameter. 
       * @default false
       */
      all_versions?: boolean;
      /**
       * Format: date-time 
       * @description The date and time that the feature should be active from. If you want to make this inactive, you can pass null here.
       */
      active_from?: string | null;
      /**
       * Format: date-time 
       * @description The date and time that the feature should be active until. If you want to make this active indefinitely, you can pass null here.
       */
      active_to?: string | null;
    };
    ChangePrepaidUnitsRequest: {
      /**
       * Format: double 
       * @description The new prepaid units for the customer.
       */
      units: number;
      /**
       * @description Whether or not to immediately invoice the customer for the change in prepaid units. 
       * @default true
       */
      invoice_now?: boolean;
    };
    ChangeUserOrganizationRequestRequest: {
      /** @description The organization ID to transfer to */
      transfer_to_organization_id: string;
    };
    ComponentCharge: {
      /**
       * Format: double 
       * @description The number of units to charge for. If left null, then it will be required at subscription create time.
       */
      units: number | null;
      /** @enum {unknown} */
      charge_behavior: "prorate" | "full";
    };
    ComponentChargeCreateRequest: {
      /**
       * Format: double 
       * @description The number of units to charge for. If left null, then it will be required at subscription create time.
       */
      units: number | null;
      /** @enum {unknown} */
      charge_behavior: "prorate" | "full";
    };
    ComponentUsage: {
      /** @description The name of the event you are checking access for. */
      event_name: string;
      /** @description The name of the metric. */
      metric_name: string;
      /** @description The metric_id of the metric. This metric_id can be found in the Lotus frontend if you haven't seen it before. */
      metric_id: string;
      /**
       * Format: double 
       * @description The current usage of the metric. Keep in mind the current usage of the metric can be different from the billable usage of the metric.
       */
      metric_usage: number;
      /**
       * Format: double 
       * @description If you specified a free tier of usage for this metric, this is the amount of usage that is free. Will be null if you did not specify a free tier for this metric.
       */
      metric_free_limit: number | null;
      /**
       * Format: double 
       * @description The total limit of the metric. Will be null if you did not specify a limit for this metric.
       */
      metric_total_limit: number | null;
    };
    ComponentsFixedChargeInitialValueRequest: {
      /**
       * Format: uuid 
       * @description The id of the metric that this initial value is for
       */
      metric_id: string;
      /**
       * Format: double 
       * @description The number of units of the metric that this initial value is for
       */
      units: number;
    };
    ConfirmConnected: {
      organization_id: string;
    };
    ConfirmIdemsReceived: {
      /** @enum {string} */
      status: "success";
      ids_not_found: (string)[];
    };
    ConfirmIdemsReceivedFailure: {
      /** @enum {string} */
      status: "failure";
      error: string;
    };
    ConfirmIdemsReceivedRequestRequest: {
      idempotency_ids: (string)[];
      /** @default 30 */
      number_days_lookback?: number;
      customer_id?: string;
    };
    CostAnalysis: {
      per_day: (components["schemas"]["SingleDayCostAnalysis"])[];
      /** Format: double */
      total_cost: number;
      /** Format: double */
      total_revenue: number;
      /** Format: double */
      margin: number;
    };
    CreditDrawdown: {
      credit_id: string;
      /** Format: double */
      amount: number;
      description?: string | null;
      /** Format: date-time */
      applied_at: string;
    };
    Customer: {
      customer_id: string;
      /** Format: email */
      email: string;
      /** @description The display name of the customer */
      customer_name: string | null;
      invoices: readonly (components["schemas"]["LightweightInvoice"])[];
      /** Format: double */
      total_amount_due: number;
      subscriptions: readonly (components["schemas"]["SubscriptionRecord"])[];
      /** @description A dictionary containing the customer's integrations. Keys are the integration type, and the value is a dictionary containing the integration's properties, which can vary by integration. */
      integrations: components["schemas"]["CustomerIntegrations"];
      default_currency: components["schemas"]["PricingUnit"];
      /** @enum {string|null} */
      payment_provider: "stripe" | "braintree" | "" | null;
      payment_provider_id: string | null;
      has_payment_method: boolean;
      /** @deprecated */
      address?: components["schemas"]["Address"] | null;
      billing_address: components["schemas"]["Address"] | null;
      shipping_address: components["schemas"]["Address"] | null;
      /**
       * Format: double 
       * @description Tax rate as percentage. For example, 10.5 for 10.5%
       */
      tax_rate: number | null;
      /** @enum {string} */
      timezone: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Fort_Nelson" | "America/Fortaleza" | "America/Glace_Bay" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Colombo" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kathmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Riyadh" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ulaanbaatar" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faroe" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/Perth" | "Australia/Sydney" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Ulyanovsk" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zurich" | "GMT" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Wake" | "Pacific/Wallis" | "US/Alaska" | "US/Arizona" | "US/Central" | "US/Eastern" | "US/Hawaii" | "US/Mountain" | "US/Pacific" | "UTC";
      tax_providers: readonly ("taxjar" | "lotus")[];
    };
    CustomerBalanceAdjustment: {
      credit_id: string;
      customer: components["schemas"]["LightweightCustomer"];
      /** Format: double */
      amount: number;
      /** Format: double */
      amount_remaining: number;
      currency: components["schemas"]["PricingUnit"];
      description: string | null;
      /** Format: date-time */
      effective_at: string;
      /** Format: date-time */
      expires_at: string | null;
      /** @enum {string} */
      status: "active" | "inactive";
      /** Format: double */
      amount_paid: number;
      amount_paid_currency: components["schemas"]["PricingUnit"] | null;
      drawdowns: readonly (components["schemas"]["CreditDrawdown"])[];
    };
    CustomerBalanceAdjustmentCreateRequest: {
      /** @description The id provided when creating the customer, we suggest matching with your internal customer id in your backend */
      customer_id: string | null;
      /** Format: double */
      amount: number;
      currency_code: string;
      description?: string | null;
      /** Format: date-time */
      effective_at?: string;
      /** Format: date-time */
      expires_at?: string | null;
      /** Format: double */
      amount_paid?: number;
      amount_paid_currency_code?: string;
    };
    CustomerBalanceAdjustmentUpdateRequest: {
      description?: string | null;
      /** Format: date-time */
      expires_at?: string | null;
    };
    CustomerBraintreeIntegration: {
      braintree_id: string;
      has_payment_method: boolean;
    };
    CustomerCreateRequest: {
      /** @description The display name of the customer */
      customer_name?: string | null;
      /** @description The id provided when creating the customer, we suggest matching with your internal customer id in your backend */
      customer_id: string | null;
      /**
       * Format: email 
       * @description The primary email address of the customer, must be the same as the email address used to create the customer in the payment provider
       */
      email: string;
      /**
       * @description The payment provider this customer is associated with. Currently, only Stripe is supported. 
       * @enum {string}
       */
      payment_provider?: "stripe" | "braintree";
      /** @description The customer's ID in the specified payment provider. Please note that payment_provider and payment_provider_id are mutually necessary. */
      payment_provider_id?: string | null;
      /** @description Extra metadata for the customer */
      properties?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /** @description The currency code this customer will be invoiced in. Codes are 3 letters, e.g. 'USD'. */
      default_currency_code?: string;
      /** @deprecated */
      address?: components["schemas"]["AddressRequest"] | null;
      billing_address?: components["schemas"]["AddressRequest"] | null;
      shipping_address?: components["schemas"]["AddressRequest"] | null;
      /**
       * Format: double 
       * @description Tax rate as percentage. For example, 10.5 for 10.5%
       */
      tax_rate?: number | null;
    };
    CustomerCreatedRequest: {
      payload: components["schemas"]["CustomerRequest"];
    };
    CustomerDeleteResponse: {
      customer_id: string;
      /** Format: date-time */
      deleted: string;
      /** Format: email */
      email: string | null;
      num_subscriptions_deleted: number;
      num_addons_deleted: number;
    };
    CustomerIntegrations: {
      stripe?: components["schemas"]["CustomerStripeIntegration"] | null;
      braintree?: components["schemas"]["CustomerBraintreeIntegration"] | null;
    };
    CustomerRequest: {
      customer_id: string;
      /** Format: email */
      email: string;
      default_currency: components["schemas"]["PricingUnitRequest"];
      /** @enum {string|null} */
      payment_provider: "stripe" | "braintree" | "" | null;
      /** @enum {string} */
      timezone: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Fort_Nelson" | "America/Fortaleza" | "America/Glace_Bay" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Colombo" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kathmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Riyadh" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ulaanbaatar" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faroe" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/Perth" | "Australia/Sydney" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Ulyanovsk" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zurich" | "GMT" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Wake" | "Pacific/Wallis" | "US/Alaska" | "US/Arizona" | "US/Central" | "US/Eastern" | "US/Hawaii" | "US/Mountain" | "US/Pacific" | "UTC";
    };
    CustomerStripeIntegration: {
      stripe_id: string;
      has_payment_method: boolean;
    };
    CustomerSummary: {
      /** @description The display name of the customer */
      customer_name?: string | null;
      /** @description The id provided when creating the customer, we suggest matching with your internal customer id in your backend */
      customer_id?: string | null;
      subscriptions: readonly (components["schemas"]["SubscriptionCustomerSummary"])[];
    };
    CustomerUpdate: {
      default_currency_code: string;
      billing_address?: components["schemas"]["Address"] | null;
      shipping_address?: components["schemas"]["Address"] | null;
      /**
       * Format: double 
       * @description Tax rate as percentage. For example, 10.5 for 10.5%
       */
      tax_rate?: number | null;
      /** @enum {string} */
      timezone: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Fort_Nelson" | "America/Fortaleza" | "America/Glace_Bay" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Colombo" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kathmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Riyadh" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ulaanbaatar" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faroe" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/Perth" | "Australia/Sydney" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Ulyanovsk" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zurich" | "GMT" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Wake" | "Pacific/Wallis" | "US/Alaska" | "US/Arizona" | "US/Central" | "US/Eastern" | "US/Hawaii" | "US/Mountain" | "US/Pacific" | "UTC";
      customer_name?: string;
    };
    CustomerWithRevenue: {
      /** @description The id provided when creating the customer, we suggest matching with your internal customer id in your backend */
      customer_id?: string | null;
      /** Format: double */
      total_amount_due: number;
    };
    DayMetricUsage: {
      /** Format: date */
      date: string;
      customer_usages: {
        [key: string]: number | undefined;
      };
    };
    DeleteAddOn: {
      success: boolean;
      message: string;
    };
    DeleteAddOnVersion: {
      success: boolean;
      message: string;
    };
    DeletePlan: {
      success: boolean;
      message: string;
    };
    DeletePlanVersion: {
      success: boolean;
      message: string;
    };
    DemoLoginFailure: {
      detail: string;
    };
    DemoLoginRequestRequest: {
      username: string;
      password: string;
    };
    DemoLoginSuccess: {
      detail: string;
      token: string;
      user: components["schemas"]["User"];
    };
    DemoRegistrationDetailRequest: {
      email: string;
      password: string;
      username: string;
    };
    DemoRegistrationFailure: {
      detail: string;
    };
    DemoRegistrationRequest: {
      register: components["schemas"]["DemoRegistrationDetailRequest"];
    };
    DemoRegistrationSuccess: {
      detail: string;
      token: string;
      user: components["schemas"]["User"];
    };
    DraftInvoice: {
      invoice_id: string;
      line_items: readonly (components["schemas"]["GroupedLineItem"])[];
      /** Format: date-time */
      due_date: string | null;
      /** Format: double */
      cost_due: number;
      /** Format: date */
      start_date: string;
      /** Format: date-time */
      issue_date: string;
      currency: components["schemas"]["PricingUnit"];
      /** Format: date */
      end_date: string;
    };
    DraftInvoiceResponse: {
      invoice?: (components["schemas"]["DraftInvoice"])[];
    };
    EmailRequest: {
      /** Format: email */
      email: string;
    };
    EventDetail: {
      /** @description String name of the event, corresponds to definition in metrics */
      event_name: string;
      /** @description Extra metadata on the event that can be filtered and queried on in the metrics. All key value pairs should have string keys and values can be either strings or numbers. Place subscription filters in this object to specify which subscription the event should be tracked under */
      properties?: {
        [key: string]: unknown | undefined;
      };
      /**
       * Format: date-time 
       * @description The time that the event occured, represented as a datetime in RFC3339 in the UTC timezome.
       */
      time_created: string;
      /** @description A unique identifier for the specific event being passed in. Passing in a unique id allows Lotus to make sure no double counting occurs. We recommend using a UUID4. */
      idempotency_id: string;
      /** @description The id of the customer that this event is associated with, usually the customer id in your backend */
      customer_id: string;
    };
    EventRequest: {
      /** @description String name of the event, corresponds to definition in metrics */
      event_name: string;
      /** @description Extra metadata on the event that can be filtered and queried on in the metrics. All key value pairs should have string keys and values can be either strings or numbers. Place subscription filters in this object to specify which subscription the event should be tracked under */
      properties?: {
        [key: string]: unknown | undefined;
      };
      /**
       * Format: date-time 
       * @description The time that the event occured, represented as a datetime in RFC3339 in the UTC timezome.
       */
      time_created: string;
      /** @description A unique identifier for the specific event being passed in. Passing in a unique id allows Lotus to make sure no double counting occurs. We recommend using a UUID4. */
      idempotency_id: string;
      /** @description The id of the customer that this event is associated with, usually the customer id in your backend */
      customer_id: string;
    };
    ExternalPlanLink: {
      /** @enum {string} */
      source: "stripe" | "braintree";
      external_plan_id: string;
    };
    ExternalPlanLinkRequest: {
      /** Format: uuid */
      plan_id: string;
      /** @enum {string} */
      source: "stripe" | "braintree";
      external_plan_id: string;
    };
    Feature: {
      feature_id: string;
      feature_name: string;
      feature_description: string | null;
    };
    FeatureAccessPerSubscription: {
      subscription: components["schemas"]["AccessMethodsSubscriptionRecord"];
      access: boolean;
    };
    FeatureAccessResponse: {
      customer: components["schemas"]["LightweightCustomer"];
      /** @description Whether or not the customer has access to this feature. The default behavior for this is whether any of the customer's plans have access to this feature. If you have specified subscription filters, then this will be whether any of the customer's plans that match the subscription filters have access to this feature. You can customize the behavior of this flag by setting a policy in your Organization settings in the frontend. */
      access: boolean;
      feature: components["schemas"]["Feature"];
      access_per_subscription: (components["schemas"]["FeatureAccessPerSubscription"])[];
    };
    FeatureCreateRequest: {
      feature_name: string;
      feature_description?: string | null;
    };
    FeatureDetail: {
      feature_id: string;
      feature_name: string;
      feature_description: string | null;
    };
    GetEventAccess: {
      /** @description The plan_id of the plan we are checking that has access to this feature. */
      plan_id: string;
      /** @description The subscription filters that are applied to this plan's relationship with the customer. If your billing model does not have the ability multiple plans or subscriptions per customer, this is likely not relevant for you. */
      subscription_filters: (components["schemas"]["SubscriptionCategoricalFilter"])[];
      /** @description The usage of each component of the plan the customer is on. Only components that match the request will be included: If metric_id is provided, this will be a list of length 1. If event_name is provided, this will be a list of length 1 or more depending on how many components of the customer's plan use this event. */
      usage_per_component: (components["schemas"]["ComponentUsage"])[];
    };
    GetFeatureAccess: {
      /** @description Name of the feature to check access for. */
      feature_name: string;
      /** @description The plan_id of the plan we are checking that has access to this feature. */
      plan_id: string;
      /** @description The subscription filters that are applied to this plan's relationship with the customer. If your billing model does not have the ability multiple plans or subscriptions per customer, this is likely not relevant for you. */
      subscription_filters: (components["schemas"]["SubscriptionCategoricalFilter"])[];
      /** @description Whether or not the plan has access to this feature. If your customer can have multiple plans or subscriptions, then you must check the 'access' across all returned plans to determine if the customer can access this feature. */
      access: boolean;
    };
    GroupedLineItem: {
      plan_name: string;
      subscription_filters: (components["schemas"]["SubscriptionCategoricalFilterDetail"])[];
      /** Format: double */
      subtotal: number;
      /** Format: date-time */
      start_date: string;
      /** Format: date-time */
      end_date: string;
      sub_items: (components["schemas"]["LightweightInvoiceLineItem"])[];
    };
    ImportCustomerFailure: {
      /** @enum {string} */
      status: "error";
      detail: string;
    };
    ImportCustomerSuccess: {
      /** @enum {string} */
      status: "success";
      detail: string;
    };
    ImportCustomersRequestRequest: {
      /** @enum {string} */
      source: "stripe" | "braintree";
    };
    ImportPaymentObjectFailure: {
      /** @enum {string} */
      status: "error";
      detail: string;
    };
    ImportPaymentObjectSuccess: {
      /** @enum {string} */
      status: "success";
      detail: string;
    };
    ImportPaymentObjectsRequestRequest: {
      /** @enum {string} */
      source: "stripe" | "braintree";
    };
    InitResetPasswordSuccess: {
      email: string;
    };
    InitialAddOnVersionCreateRequest: {
      /** @enum {unknown} */
      billing_frequency: "one_time" | "recurring";
      currency_code: string;
      features?: (string)[];
      /** @enum {unknown} */
      invoice_when: "invoice_on_attach" | "invoice_on_subscription_end";
      recurring_charges?: (components["schemas"]["RecurringChargeCreateRequest"])[] | null;
      components?: (components["schemas"]["PlanComponentCreateRequest"])[] | null;
    };
    InitialExternalPlanLink: {
      /** @enum {string} */
      source: "stripe" | "braintree";
      external_plan_id: string;
    };
    InitialExternalPlanLinkRequest: {
      /** @enum {string} */
      source: "stripe" | "braintree";
      external_plan_id: string;
    };
    InitialPlanVersionCreateRequest: {
      localized_name?: string | null;
      version: number;
      target_customer_ids?: (string | null)[];
      currency_code: string;
      features?: (string)[];
      recurring_charges?: (components["schemas"]["RecurringChargeCreateRequest"])[];
      day_anchor?: number | null;
      month_anchor?: number | null;
      components?: (components["schemas"]["PlanComponentCreateRequest"])[];
      price_adjustment?: components["schemas"]["PriceAdjustmentRequest"];
    };
    InviteLinkResponse: {
      /** Format: email */
      email: string;
      /** Format: uri */
      link: string;
    };
    InviteRequestRequest: {
      /** Format: email */
      email: string;
    };
    InviteResponse: {
      /** Format: email */
      email: string;
    };
    Invoice: {
      invoice_id: string;
      invoice_number: string;
      /** Format: double */
      cost_due: number;
      currency: components["schemas"]["PricingUnit"];
      /** Format: date-time */
      issue_date: string;
      /** @enum {unknown} */
      payment_status: "draft" | "voided" | "paid" | "unpaid";
      external_payment_obj_id: string | null;
      /** @enum {string|null} */
      external_payment_obj_type: "stripe" | "braintree" | "" | null;
      line_items: (components["schemas"]["InvoiceLineItem"])[];
      customer: components["schemas"]["LightweightCustomerSerializerForInvoice"];
      /** Format: date-time */
      due_date: string | null;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      seller: components["schemas"]["Seller"];
      /** Format: uri */
      invoice_pdf: string | null;
    };
    InvoiceCreatedRequest: {
      payload: components["schemas"]["InvoiceRequest"];
    };
    InvoiceDetail: {
      invoice_id: string;
      invoice_number: string;
      /** Format: double */
      cost_due: number;
      currency: components["schemas"]["PricingUnit"];
      /** Format: date-time */
      issue_date: string;
      /** @enum {unknown} */
      payment_status: "draft" | "voided" | "paid" | "unpaid";
      external_payment_obj_id: string | null;
      /** @enum {string|null} */
      external_payment_obj_type: "stripe" | "braintree" | "" | null;
      line_items: (components["schemas"]["InvoiceLineItem"])[];
      customer: components["schemas"]["LightweightCustomerSerializerForInvoice"];
      /** Format: date-time */
      due_date: string | null;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      seller: components["schemas"]["Seller"];
      /** Format: uri */
      invoice_pdf: string | null;
    };
    InvoiceLineItem: {
      name: string;
      /** Format: date-time */
      start_date: string;
      /** Format: date-time */
      end_date: string;
      /** Format: double */
      quantity: number | null;
      /** Format: double */
      subtotal: number;
      /** @enum {string|null} */
      billing_type: "in_arrears" | "intermediate" | "in_advance" | "one_time" | "" | null;
      metadata: ({
        [key: string]: unknown | undefined;
      }) | null;
      plan: components["schemas"]["LightweightPlanVersion"] | null;
      subscription_filters: readonly (components["schemas"]["SubscriptionCategoricalFilter"])[] | null;
    };
    InvoiceLineItemRequest: {
      name: string;
      /** Format: date-time */
      start_date: string;
      /** Format: date-time */
      end_date: string;
      /** Format: double */
      quantity: number | null;
      /** Format: double */
      subtotal: number;
      /** @enum {string|null} */
      billing_type: "in_arrears" | "intermediate" | "in_advance" | "one_time" | "" | null;
      metadata: ({
        [key: string]: unknown | undefined;
      }) | null;
    };
    InvoicePaidRequest: {
      payload: components["schemas"]["InvoiceRequest"];
    };
    InvoicePastDueRequest: {
      payload: components["schemas"]["InvoiceRequest"];
    };
    InvoiceRequest: {
      invoice_id: string;
      currency: components["schemas"]["PricingUnitRequest"];
      /** @enum {string|null} */
      external_payment_obj_type: "stripe" | "braintree" | "" | null;
      line_items: (components["schemas"]["InvoiceLineItemRequest"])[];
      seller: components["schemas"]["SellerRequest"];
    };
    InvoiceUpdate: {
      /** @enum {string} */
      payment_status: "paid" | "unpaid";
    };
    LightweightAddOn: {
      /** @description The name of the add-on plan. */
      addon_name: string;
      /** @description The ID of the add-on plan. */
      addon_id: string;
      /** @enum {string} */
      addon_type: "flat" | "usage_based";
      /** @enum {unknown} */
      billing_frequency: "one_time" | "recurring";
    };
    LightweightAddOnRequest: {
      /** @description The name of the add-on plan. */
      addon_name: string;
      /** @description The ID of the add-on plan. */
      addon_id: string;
    };
    LightweightAddOnSubscriptionRecord: {
      addon_subscription_id: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      start_date: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      end_date: string;
      addon: components["schemas"]["LightweightAddOn"];
      fully_billed: boolean;
    };
    LightweightAddOnSubscriptionRecordRequest: {
      addon_subscription_id: string;
      addon: components["schemas"]["LightweightAddOnRequest"];
    };
    LightweightCustomer: {
      /** @description The display name of the customer */
      customer_name: string | null;
      /**
       * Format: email 
       * @description The primary email address of the customer, must be the same as the email address used to create the customer in the payment provider
       */
      email: string | null;
      /** @description The id provided when creating the customer, we suggest matching with your internal customer id in your backend */
      customer_id: string | null;
    };
    LightweightCustomerSerializerForInvoice: {
      /** @description The display name of the customer */
      customer_name: string | null;
      /**
       * Format: email 
       * @description The primary email address of the customer, must be the same as the email address used to create the customer in the payment provider
       */
      email: string | null;
      /** @description The id provided when creating the customer, we suggest matching with your internal customer id in your backend */
      customer_id: string | null;
      address?: components["schemas"]["Address"] | null;
    };
    LightweightInvoice: {
      invoice_id: string;
      /** @enum {string|null} */
      external_payment_obj_type: "stripe" | "braintree" | "" | null;
      /** Format: uri */
      invoice_pdf: string | null;
      /** Format: double */
      cost_due: number;
      /** Format: date-time */
      due_date: string | null;
      /** Format: date */
      start_date: string;
      seller: components["schemas"]["Seller"];
      /** @enum {unknown} */
      payment_status: "draft" | "voided" | "paid" | "unpaid";
      /** Format: date-time */
      issue_date: string;
      currency: components["schemas"]["PricingUnit"];
      external_payment_obj_id: string | null;
      invoice_number: string;
      /** Format: date */
      end_date: string;
    };
    LightweightInvoiceLineItem: {
      /** Format: double */
      quantity: number | null;
      subscription_filters: readonly (components["schemas"]["SubscriptionCategoricalFilter"])[] | null;
      /** Format: date-time */
      start_date: string;
      plan: components["schemas"]["LightweightPlanVersion"] | null;
      name: string;
      /** Format: double */
      subtotal: number;
      /** @enum {string|null} */
      billing_type: "in_arrears" | "intermediate" | "in_advance" | "one_time" | "" | null;
      /** Format: date-time */
      end_date: string;
    };
    LightweightMetric: {
      metric_id: string;
      /** @description Name of the event that this metric is tracking. */
      event_name: string;
      metric_name: string;
    };
    LightweightOrganization: {
      organization_id: string;
      organization_name: string;
      /** @enum {string} */
      organization_type: "Production" | "Development" | "Demo" | "Internal Demo";
      current: boolean;
    };
    LightweightPlan: {
      /** @description Name of the plan */
      plan_name: string;
      plan_id: string;
    };
    LightweightPlanVersion: {
      plan_name: string;
      plan_id: string;
      version_id: string;
      version: number | "custom_version";
    };
    LightweightPlanVersionRequest: {
      plan_id: string;
    };
    LightweightSubscriptionRecord: {
      plan_detail: components["schemas"]["LightweightPlanVersion"];
      /** @description Whether the subscription automatically renews. Defaults to true. */
      auto_renew: boolean;
      subscription_filters: readonly (components["schemas"]["SubscriptionCategoricalFilter"])[];
      subscription_id: string;
      /** @description Whether this subscription came from a renewal or from a first-time. Defaults to true on creation. */
      is_new: boolean;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      start_date: string;
      billing_plan: components["schemas"]["LightweightPlanVersion"];
      fully_billed: boolean;
      addons: (components["schemas"]["LightweightAddOnSubscriptionRecord"])[];
      customer: components["schemas"]["LightweightCustomer"];
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      end_date: string;
    };
    LightweightSubscriptionRecordRequest: {
      /** @description Whether the subscription automatically renews. Defaults to true. */
      auto_renew: boolean;
      subscription_id: string;
      /** @description Whether this subscription came from a renewal or from a first-time. Defaults to true on creation. */
      is_new: boolean;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      start_date: string;
      billing_plan: components["schemas"]["LightweightPlanVersionRequest"];
      addons: (components["schemas"]["LightweightAddOnSubscriptionRecordRequest"])[];
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      end_date: string;
    };
    LightweightUser: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      /** Format: email */
      email: string;
    };
    LoginFailure: {
      detail: string;
    };
    LoginRequestRequest: {
      username: string;
      password: string;
    };
    LoginSuccess: {
      detail: string;
      token: string;
      user: components["schemas"]["User"];
    };
    LogoutFailure: {
      detail: string;
    };
    LogoutSuccess: {
      detail: string;
    };
    MakePublicRequestRequest: {
      version: number;
    };
    MakePublicResponse: {
      success: boolean;
      message: string;
    };
    MakeReplaceWithRequest: {
      /** @description The plan versions that will get replaced by the current version. */
      versions_to_replace: (string)[];
    };
    MakeReplaceWithResponse: {
      success: boolean;
      message: string;
    };
    Metric: {
      metric_id: string;
      /** @description Name of the event that this metric is tracking. */
      event_name: string;
      /** @description The name of the property of the event that should be used for this metric. Doesn't apply if the metric is of type 'counter' with an aggregation of count. */
      property_name: string | null;
      aggregation_type: string;
      /**
       * @description The granularity of the metric. Only applies to metrics of type 'gauge' or 'rate'. 
       * @enum {string|null}
       */
      granularity: "seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years" | "total" | "" | null;
      /**
       * @description Used only for metrics of type 'gauge'. Please refer to our documentation for an explanation of the different types. 
       * @enum {string|null}
       */
      event_type: "delta" | "total" | "" | null;
      /**
       * @description The type of metric that this is. Please refer to our documentation for an explanation of the different types. 
       * @enum {string}
       */
      metric_type: "counter" | "rate" | "custom" | "gauge";
      metric_name: string;
      numeric_filters: (components["schemas"]["NumericFilter"])[];
      categorical_filters: (components["schemas"]["CategoricalFilter"])[];
      /** @description Whether or not this metric is a cost metric (used to track costs to your business). */
      is_cost_metric: boolean;
      /** @description A custom SQL query that can be used to define the metric. Please refer to our documentation for more information. */
      custom_sql: string | null;
      /**
       * @description The proration of the metric. Only applies to metrics of type 'gauge'. 
       * @enum {string|null}
       */
      proration: "seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years" | "total" | "" | null;
    };
    MetricAccessPerSubscription: {
      subscription: components["schemas"]["AccessMethodsSubscriptionRecord"];
      /**
       * Format: double 
       * @description The current usage of the metric. Keep in mind the current usage of the metric can be different from the billable usage of the metric. For examnple, for a gauge metric, the `metric_usage` is the current value of the gauge, while the billable usage is the accumulated tiem at each gauge level at the end of the subscription.
       */
      metric_usage: number;
      /**
       * Format: double 
       * @description If you specified a free tier of usage for this metric, this is the amount of usage that is free. Will be 0 if you didn't specify a free limit for this metric or this subscription doesn't have access to this metric, and null if the free tier is unlimited.
       */
      metric_free_limit: number | null;
      /**
       * Format: double 
       * @description The total limit of the metric. Will be 0 if this subscription doesn't have access to this metric, and null if there is no limit to this metric.
       */
      metric_total_limit: number | null;
    };
    MetricAccessResponse: {
      customer: components["schemas"]["LightweightCustomer"];
      /** @description Whether or not the customer has access to this metric. The default behavior for this is whether all of the customer's plans (that have access to the metric) are below the total limit of the metric. If you have specified subscription filters, then this will be whether all of the customer's plans that match the subscription filters are below the total limit of the metric. You can customize the behavior of this flag by setting a policy in your Organization settings in the frontend. */
      access: boolean;
      metric: components["schemas"]["LightweightMetric"];
      access_per_subscription: (components["schemas"]["MetricAccessPerSubscription"])[];
    };
    MetricCreateRequest: {
      /** @description Name of the event that this metric is tracking. */
      event_name?: string;
      /** @description The name of the property of the event that should be used for this metric. Doesn't apply if the metric is of type 'counter' with an aggregation of count. */
      property_name?: string | null;
      /**
       * @description The type of aggregation that should be used for this metric. Please refer to our documentation for an explanation of the different types. 
       * @enum {string|null}
       */
      usage_aggregation_type?: "count" | "sum" | "max" | "unique" | "latest" | "average" | "" | null;
      /** @enum {string|null} */
      billable_aggregation_type?: "count" | "sum" | "max" | "unique" | "latest" | "average" | "" | null;
      /**
       * @description The granularity of the metric. Only applies to metrics of type 'gauge' or 'rate'. 
       * @enum {string|null}
       */
      granularity?: "seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years" | "total" | "" | null;
      /**
       * @description Used only for metrics of type 'gauge'. Please refer to our documentation for an explanation of the different types. 
       * @enum {string|null}
       */
      event_type?: "delta" | "total" | "" | null;
      /**
       * @description The type of metric that this is. Please refer to our documentation for an explanation of the different types. 
       * @enum {string}
       */
      metric_type: "counter" | "rate" | "custom" | "gauge";
      metric_name: string;
      /**
       * @description The proration of the metric. Only applies to metrics of type 'gauge'. 
       * @enum {string|null}
       */
      proration?: "seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years" | "total" | "" | null;
      properties?: ({
        [key: string]: unknown | undefined;
      }) | null;
      /**
       * @description Whether or not this metric is a cost metric (used to track costs to your business). 
       * @default false
       */
      is_cost_metric?: boolean;
      /** @description A custom SQL query that can be used to define the metric. Please refer to our documentation for more information. */
      custom_sql?: string | null;
      categorical_filters?: (components["schemas"]["CategoricalFilterDetailRequest"])[];
      numeric_filters?: (components["schemas"]["NumericFilterDetailRequest"])[];
    };
    MetricDetail: {
      /** @description A custom SQL query that can be used to define the metric. Please refer to our documentation for more information. */
      custom_sql: string | null;
      /** @description The name of the property of the event that should be used for this metric. Doesn't apply if the metric is of type 'counter' with an aggregation of count. */
      property_name: string | null;
      numeric_filters: (components["schemas"]["NumericFilter"])[];
      /** @description Name of the event that this metric is tracking. */
      event_name: string;
      categorical_filters: (components["schemas"]["CategoricalFilter"])[];
      metric_name: string;
      /**
       * @description The granularity of the metric. Only applies to metrics of type 'gauge' or 'rate'. 
       * @enum {string|null}
       */
      granularity: "seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years" | "total" | "" | null;
      metric_id: string;
      /**
       * @description Used only for metrics of type 'gauge'. Please refer to our documentation for an explanation of the different types. 
       * @enum {string|null}
       */
      event_type: "delta" | "total" | "" | null;
      /**
       * @description The type of metric that this is. Please refer to our documentation for an explanation of the different types. 
       * @enum {string}
       */
      metric_type: "counter" | "rate" | "custom" | "gauge";
      /**
       * @description The proration of the metric. Only applies to metrics of type 'gauge'. 
       * @enum {string|null}
       */
      proration: "seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years" | "total" | "" | null;
      /** @description Whether or not this metric is a cost metric (used to track costs to your business). */
      is_cost_metric: boolean;
      /**
       * @description The type of aggregation that should be used for this metric. Please refer to our documentation for an explanation of the different types. 
       * @enum {string}
       */
      usage_aggregation_type?: "count" | "sum" | "max" | "unique" | "latest" | "average";
      /** @enum {string|null} */
      billable_aggregation_type?: "count" | "sum" | "max" | "unique" | "latest" | "average" | "" | "" | null;
    };
    MetricRequest: {
      metric_id: string;
      aggregation_type: string;
      metric_name: string;
      numeric_filters: (components["schemas"]["NumericFilterRequest"])[];
      categorical_filters: (components["schemas"]["CategoricalFilterRequest"])[];
    };
    MetricRevenue: {
      metric_name: string;
      /** Format: double */
      original_plan_revenue: number;
      /** Format: double */
      new_plan_revenue: number;
    };
    MetricUpdate: {
      billable_metric_name?: string | null;
      /** @enum {string} */
      status?: "active" | "archived";
    };
    NetsuiteInvoiceCSVView: {
      /** Format: uri */
      url: string;
    };
    NumericFilter: {
      property_name: string;
      /** @enum {string} */
      operator: "gte" | "gt" | "eq" | "lt" | "lte";
      /** Format: double */
      comparison_value: number;
    };
    NumericFilterDetailRequest: {
      property_name: string;
      /** @enum {string} */
      operator: "gte" | "gt" | "eq" | "lt" | "lte";
      /** Format: double */
      comparison_value: number;
    };
    NumericFilterRequest: {
      property_name: string;
      /** @enum {string} */
      operator: "gte" | "gt" | "eq" | "lt" | "lte";
      /** Format: double */
      comparison_value: number;
    };
    Organization: {
      organization_id: string;
      organization_name: string;
      users: readonly (components["schemas"]["OrganizationUser"])[];
      default_currency: components["schemas"]["PricingUnitDetail"];
      available_currencies: readonly (components["schemas"]["PricingUnitDetail"])[];
      plan_tags: readonly (components["schemas"]["Tag"])[];
      /**
       * Format: double 
       * @description Tax rate as percentage. For example, 10.5 for 10.5%
       */
      tax_rate?: number | null;
      payment_grace_period: number | null;
      linked_organizations: readonly (components["schemas"]["LightweightOrganization"])[];
      current_user: components["schemas"]["LightweightUser"];
      address: components["schemas"]["Address"] | null;
      team_name: string;
      subscription_filter_keys: readonly (string)[];
      /** @enum {string} */
      timezone: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Fort_Nelson" | "America/Fortaleza" | "America/Glace_Bay" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Colombo" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kathmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Riyadh" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ulaanbaatar" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faroe" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/Perth" | "Australia/Sydney" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Ulyanovsk" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zurich" | "GMT" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Wake" | "Pacific/Wallis" | "US/Alaska" | "US/Arizona" | "US/Central" | "US/Eastern" | "US/Hawaii" | "US/Mountain" | "US/Pacific" | "UTC";
      stripe_account_id: string | null;
      braintree_merchant_id: string | null;
      tax_providers: readonly ("taxjar" | "lotus")[];
    };
    OrganizationCreateRequest: {
      organization_name: string;
      default_currency_code?: string;
      /**
       * @default development 
       * @enum {string}
       */
      organization_type?: "development" | "production";
    };
    OrganizationSetting: {
      setting_id: string;
      /** @enum {string} */
      setting_name: "generate_customer_after_creating_in_lotus" | "gen_cust_in_braintree_after_lotus" | "subscription_filter_keys" | "payment_grace_period";
      setting_values: {
        [key: string]: unknown | undefined;
      };
      /** @enum {string} */
      setting_group?: "stripe" | "braintree" | "billing";
    };
    OrganizationSettingUpdate: {
      setting_values?: {
        [key: string]: unknown | undefined;
      };
    };
    OrganizationUser: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      /** Format: email */
      email: string;
      role: string;
      /**
       * @default Active 
       * @enum {string}
       */
      status?: "Active" | "Invited";
    };
    PaginatedActionList: {
      next?: string | null;
      previous?: string | null;
      results?: (components["schemas"]["Action"])[];
    };
    PaginatedEventDetailList: {
      next?: string | null;
      previous?: string | null;
      results?: (components["schemas"]["EventDetail"])[];
    };
    PatchedAddOnUpdateRequest: {
      addon_name?: string;
      /** Format: date-time */
      active_from?: string;
      /** Format: date-time */
      active_to?: string | null;
    };
    PatchedAddOnVersionUpdateRequest: {
      addon_version_name?: string;
      /** Format: date-time */
      active_from?: string | null;
      /** Format: date-time */
      active_to?: string | null;
    };
    PatchedCustomerUpdateRequest: {
      default_currency_code?: string;
      billing_address?: components["schemas"]["AddressRequest"] | null;
      shipping_address?: components["schemas"]["AddressRequest"] | null;
      /**
       * Format: double 
       * @description Tax rate as percentage. For example, 10.5 for 10.5%
       */
      tax_rate?: number | null;
      /** @enum {string} */
      timezone?: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Fort_Nelson" | "America/Fortaleza" | "America/Glace_Bay" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Colombo" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kathmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Riyadh" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ulaanbaatar" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faroe" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/Perth" | "Australia/Sydney" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Ulyanovsk" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zurich" | "GMT" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Wake" | "Pacific/Wallis" | "US/Alaska" | "US/Arizona" | "US/Central" | "US/Eastern" | "US/Hawaii" | "US/Mountain" | "US/Pacific" | "UTC";
      customer_name?: string;
    };
    PatchedInvoiceUpdateRequest: {
      /** @enum {string} */
      payment_status?: "paid" | "unpaid";
    };
    PatchedMetricUpdateRequest: {
      billable_metric_name?: string | null;
      /** @enum {string} */
      status?: "active" | "archived";
    };
    PatchedOrganizationSettingUpdateRequest: {
      setting_values?: {
        [key: string]: unknown | undefined;
      };
    };
    PatchedOrganizationUpdateRequest: {
      default_currency_code?: string;
      address?: components["schemas"]["AddressRequest"] | null;
      /**
       * Format: double 
       * @description Tax rate as percentage. For example, 10.5 for 10.5%
       */
      tax_rate?: number | null;
      payment_grace_period?: number | null;
      plan_tags?: (components["schemas"]["TagRequest"])[];
      subscription_filter_keys?: (string)[];
      /** @enum {string} */
      timezone?: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Fort_Nelson" | "America/Fortaleza" | "America/Glace_Bay" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Colombo" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kathmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Riyadh" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ulaanbaatar" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faroe" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/Perth" | "Australia/Sydney" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Ulyanovsk" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zurich" | "GMT" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Wake" | "Pacific/Wallis" | "US/Alaska" | "US/Arizona" | "US/Central" | "US/Eastern" | "US/Hawaii" | "US/Mountain" | "US/Pacific" | "UTC";
      /**
       * @description To udpate a payment provider's ID, specify the payment provider you want to update in this field, and the payment_provider_id in the corresponding field. 
       * @enum {string}
       */
      payment_provider?: "stripe" | "braintree";
      payment_provider_id?: string;
      nango_connected?: boolean;
      tax_providers?: (("taxjar" | "lotus")[]) | null;
    };
    PatchedPlanUpdateRequest: {
      /** @description Name of the plan */
      plan_name?: string;
      /** @description Description of the plan */
      plan_description?: string | null;
      taxjar_code?: string | null;
      /** Format: date-time */
      active_from?: string;
      /** Format: date-time */
      active_to?: string | null;
    };
    PatchedPlanVersionUpdateRequest: {
      localized_name?: string | null;
      /** Format: date-time */
      active_from?: string | null;
      /** Format: date-time */
      active_to?: string | null;
    };
    PaymentProcesorPostDataRequest: {
      /** @enum {string} */
      payment_processor: "stripe" | "braintree";
      data: {
        [key: string]: unknown | undefined;
      };
    };
    PaymentProcesorPostRequestRequest: {
      pp_info: components["schemas"]["PaymentProcesorPostDataRequest"];
    };
    PaymentProcesorPostResponse: {
      /** @enum {string} */
      payment_processor: "stripe" | "braintree";
      success: boolean;
      details: string;
    };
    PeriodMetricRevenueResponse: {
      /** Format: double */
      total_revenue_period_1: number;
      /** Format: double */
      total_revenue_period_2: number;
      /** Format: double */
      earned_revenue_period_1: number;
      /** Format: double */
      earned_revenue_period_2: number;
    };
    PeriodMetricUsageResponse: {
      metrics: {
        [key: string]: components["schemas"]["PeriodSingleMetricUsage"] | undefined;
      };
    };
    PeriodSingleMetricUsage: {
      data: (components["schemas"]["DayMetricUsage"])[];
    };
    PeriodSubscriptionsResponse: {
      period_1_total_subscriptions: number;
      period_1_new_subscriptions: number;
      period_2_total_subscriptions: number;
      period_2_new_subscriptions: number;
    };
    Plan: {
      plan_id: string;
      /** @description Name of the plan */
      plan_name: string;
      /**
       * @description Duration of the plan 
       * @enum {string|null}
       */
      plan_duration: "monthly" | "quarterly" | "yearly" | "" | null;
      /** @description Description of the plan */
      plan_description: string | null;
      /** @description The external links that this plan has. */
      external_links: (components["schemas"]["InitialExternalPlanLink"])[];
      /** @description The number of versions that this plan has. */
      num_versions: number;
      /** @description The number of active subscriptions that this plan has across all versions. */
      active_subscriptions: number;
      /** @description The tags that this plan has. */
      tags: readonly (string)[];
      /** @description This plan's versions. */
      versions: (components["schemas"]["PlanVersion"])[];
      /**
       * @deprecated 
       * @description [DEPRECATED] The parent plan that this plan has.
       */
      parent_plan: components["schemas"]["PlanNameAndID"] | null;
      /**
       * @deprecated 
       * @description [DEPRECATED] The target customer that this plan has.
       */
      target_customer: components["schemas"]["LightweightCustomer"] | null;
      /**
       * @deprecated 
       * @description [DEPRECATED] Display version has been deprecated. Use 'versions' instead. We will still return this field for now with some heuristics for figuring out what the desired version is, but it will be removed in the near future.
       */
      display_version: components["schemas"]["PlanVersion"];
      /**
       * @deprecated 
       * @description [DEPRECATED] The status of this plan.
       */
      status: string;
    };
    PlanComponent: {
      billable_metric: components["schemas"]["Metric"];
      tiers: (components["schemas"]["PriceTier"])[];
      pricing_unit: components["schemas"]["PricingUnit"];
      /** @enum {string|null} */
      invoicing_interval_unit: "day" | "week" | "month" | "year" | "" | null;
      invoicing_interval_count: number | null;
      /** @enum {string|null} */
      reset_interval_unit: "day" | "week" | "month" | "year" | "" | null;
      reset_interval_count: number | null;
      prepaid_charge: components["schemas"]["ComponentCharge"] | null;
    };
    PlanComponentCreateRequest: {
      /** Format: uuid */
      metric_id: string;
      tiers?: (components["schemas"]["PriceTierCreateRequest"])[];
      /** @enum {string|null} */
      invoicing_interval_unit?: "day" | "week" | "month" | "year" | "" | null;
      invoicing_interval_count?: number | null;
      /** @enum {string|null} */
      reset_interval_unit?: "day" | "week" | "month" | "year" | "" | null;
      reset_interval_count?: number | null;
      prepaid_charge?: components["schemas"]["ComponentChargeCreateRequest"] | null;
    };
    PlanCreateRequest: {
      /** @description Name of the plan */
      plan_name: string;
      /** @description Description of the plan */
      plan_description?: string | null;
      /**
       * @description Duration of the plan 
       * @enum {string|null}
       */
      plan_duration?: "monthly" | "quarterly" | "yearly" | "" | null;
      initial_external_links?: (components["schemas"]["InitialExternalPlanLinkRequest"])[];
      initial_version: components["schemas"]["InitialPlanVersionCreateRequest"];
      tags?: (components["schemas"]["TagRequest"])[];
    };
    PlanDetail: {
      /** @description Name of the plan */
      plan_name: string;
      versions: readonly (components["schemas"]["PlanVersionDetail"])[];
      /**
       * @description Duration of the plan 
       * @enum {string|null}
       */
      plan_duration: "monthly" | "quarterly" | "yearly" | "" | null;
      /** @description The tags that this plan has. */
      tags: readonly (components["schemas"]["Tag"])[];
      /** @description Description of the plan */
      plan_description: string | null;
      taxjar_code?: string | null;
      /** @description The number of versions that this plan has. */
      num_versions: number;
      /** @description The number of active subscriptions that this plan has across all versions. */
      active_subscriptions: number;
      plan_id: string;
      /** @description The external links that this plan has. */
      external_links: (components["schemas"]["InitialExternalPlanLink"])[];
    };
    PlanNameAndID: {
      /** @description Name of the plan */
      plan_name: string;
      plan_id: string;
    };
    PlanRepresentation: {
      plan_name: string;
      plan_id: string;
      /** Format: double */
      plan_revenue: number;
    };
    PlanUpdate: {
      /** @description Name of the plan */
      plan_name?: string;
      /** @description Description of the plan */
      plan_description?: string | null;
      taxjar_code?: string | null;
      /** Format: date-time */
      active_from?: string;
      /** Format: date-time */
      active_to?: string | null;
    };
    PlanVersion: {
      recurring_charges: readonly (components["schemas"]["RecurringCharge"])[];
      components: (components["schemas"]["PlanComponent"])[];
      features: (components["schemas"]["Feature"])[];
      price_adjustment: components["schemas"]["PriceAdjustment"] | null;
      version: number | "custom_version";
      /** @enum {string} */
      status: "active" | "retiring" | "grandfathered" | "deleted" | "inactive" | "not_started";
      plan_name: string;
      currency: components["schemas"]["PricingUnit"];
      /** Format: date-time */
      active_from: string | null;
      /** Format: date-time */
      active_to: string | null;
      localized_name: string | null;
      /** @deprecated */
      usage_billing_frequency: string | null;
      /**
       * @deprecated 
       * @enum {string}
       */
      flat_fee_billing_type: "in_advance" | "in_arrears";
      /**
       * Format: double 
       * @deprecated
       */
      flat_rate: number;
      /** @deprecated */
      description: string | null;
    };
    PlanVersionCreateRequest: {
      /** Format: uuid */
      plan_id: string;
      recurring_charges?: (components["schemas"]["RecurringChargeCreateRequest"])[];
      components?: (components["schemas"]["PlanComponentCreateRequest"])[];
      features?: (string)[];
      price_adjustment?: components["schemas"]["PriceAdjustmentRequest"];
      day_anchor?: number | null;
      month_anchor?: number | null;
      currency_code: string;
      version: number;
      target_customer_ids?: (string | null)[];
      localized_name?: string | null;
    };
    PlanVersionDetail: {
      replace_with: components["schemas"]["LightweightPlanVersion"];
      plan_name: string;
      /** Format: date-time */
      active_from: string | null;
      recurring_charges: readonly (components["schemas"]["RecurringCharge"])[];
      localized_name: string | null;
      /** Format: date-time */
      active_to: string | null;
      features: (components["schemas"]["Feature"])[];
      plan_id: string;
      version_id: string;
      currency: components["schemas"]["PricingUnit"];
      components: (components["schemas"]["PlanComponent"])[];
      version: number | "custom_version";
      alerts: readonly (components["schemas"]["UsageAlert"])[];
      active_subscriptions: number;
      transition_to: components["schemas"]["LightweightPlan"];
      /** @enum {string} */
      status: "active" | "retiring" | "grandfathered" | "deleted" | "inactive" | "not_started";
      price_adjustment: components["schemas"]["PriceAdjustment"] | null;
    };
    PlanVersionHistoricalSubscription: {
      customer_id: string;
      customer_name: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      start_date: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      end_date: string;
      /** @description Whether the subscription automatically renews. Defaults to true. */
      auto_renew: boolean;
    };
    PlanVersionNumberSetReplaceWithResponse: {
      success: boolean;
      message: string;
    };
    PlanVersionNumberSetTransitionToResponse: {
      success: boolean;
      message: string;
    };
    PlanVersionUpdate: {
      localized_name?: string | null;
      /** Format: date-time */
      active_from?: string | null;
      /** Format: date-time */
      active_to?: string | null;
    };
    PlansByNumCustomers: {
      results: (components["schemas"]["SinglePlanNumCustomers"])[];
      /** @enum {string} */
      status: "success";
    };
    PlansSetReplaceWithForVersionNumberRequest: {
      /** @description The version number of the plan that will replace the current version. */
      replacement_version_number: number;
    };
    PlansSetTransitionToForVersionNumberRequest: {
      /** @description The plan that the current version will transition to. */
      transition_to_plan_id: number;
    };
    PriceAdjustment: {
      price_adjustment_name: string;
      price_adjustment_description: string | null;
      /** @enum {string} */
      price_adjustment_type: "percentage" | "fixed" | "price_override";
      /** Format: double */
      price_adjustment_amount: number;
    };
    PriceAdjustmentRequest: {
      /** @default */
      price_adjustment_name?: string;
      price_adjustment_description?: string | null;
      /** @enum {string} */
      price_adjustment_type: "percentage" | "fixed" | "price_override";
      /** Format: double */
      price_adjustment_amount: number;
    };
    PriceTier: {
      /** @enum {unknown} */
      type: "flat" | "per_unit" | "free";
      /** Format: double */
      range_start: number;
      /** Format: double */
      range_end: number | null;
      /** Format: double */
      cost_per_batch: number | null;
      /** Format: double */
      metric_units_per_batch: number | null;
      /** @enum {unknown|null} */
      batch_rounding_type: "round_up" | "round_down" | "round_nearest" | "no_rounding" | "" | null;
    };
    PriceTierCreateRequest: {
      /** @enum {string} */
      type: "flat" | "per_unit" | "free";
      /** Format: double */
      range_start: number;
      /** Format: double */
      range_end?: number | null;
      /** Format: double */
      cost_per_batch?: number | null;
      /** Format: double */
      metric_units_per_batch?: number | null;
      /**
       * @default no_rounding 
       * @enum {string|null}
       */
      batch_rounding_type?: "round_up" | "round_down" | "round_nearest" | "no_rounding" | "" | null;
    };
    PricingUnit: {
      code: string;
      name: string;
      symbol: string;
    };
    PricingUnitDetail: {
      code: string;
      name: string;
      symbol: string;
    };
    PricingUnitDetailRequest: {
      code: string;
      name: string;
      symbol: string;
    };
    PricingUnitRequest: {
      code: string;
      name: string;
      symbol: string;
    };
    RecurringCharge: {
      name: string;
      /** @enum {string} */
      charge_timing: "in_advance" | "in_arrears";
      /** @enum {string} */
      charge_behavior: "prorate" | "full";
      /** Format: double */
      amount: number;
      pricing_unit: components["schemas"]["PricingUnit"];
      /** @enum {string|null} */
      invoicing_interval_unit: "day" | "week" | "month" | "year" | "" | null;
      invoicing_interval_count: number | null;
      /** @enum {string|null} */
      reset_interval_unit: "day" | "week" | "month" | "year" | "" | null;
      reset_interval_count: number | null;
    };
    RecurringChargeCreateRequest: {
      name: string;
      /** @enum {string} */
      charge_timing: "in_advance" | "in_arrears";
      /**
       * @default prorate 
       * @enum {string}
       */
      charge_behavior?: "prorate" | "full";
      /** Format: double */
      amount: number;
      pricing_unit_code?: string;
      /** @enum {string|null} */
      invoicing_interval_unit?: "day" | "week" | "month" | "year" | "" | null;
      invoicing_interval_count?: number | null;
      /** @enum {string|null} */
      reset_interval_unit?: "day" | "week" | "month" | "year" | "" | null;
      reset_interval_count?: number | null;
    };
    RegistrationDetailRequest: {
      organization_name: string;
      industry: string;
      email: string;
      password: string;
      username: string;
    };
    RegistrationFailure: {
      detail: string;
    };
    RegistrationRequest: {
      register: components["schemas"]["RegistrationDetailRequest"];
    };
    RegistrationSuccess: {
      detail: string;
      token: string;
      user: components["schemas"]["User"];
    };
    RemovePlanTags: {
      tags?: (components["schemas"]["Tag"])[];
      success: boolean;
      message: string;
    };
    RemovePlanTagsRequest: {
      tags?: (components["schemas"]["TagRequest"])[];
    };
    RemoveTargetCustomerResponse: {
      success: boolean;
      message: string;
    };
    ResetPasswordRequestRequest: {
      userId: string;
      password: string;
      token: string;
    };
    ResetPasswordSuccess: {
      detail: string;
      token: string;
    };
    RevenueDate: {
      /** Format: date */
      date: string;
      /** Format: double */
      original_plan_revenue: number;
      /** Format: double */
      new_plan_revenue: number;
    };
    Seller: {
      name: string;
      address?: components["schemas"]["Address"] | null;
      phone?: string | null;
      /** Format: email */
      email?: string | null;
    };
    SellerRequest: {
      name: string;
      phone?: string | null;
      /** Format: email */
      email?: string | null;
    };
    SessionSuccess: {
      isAuthenticated: boolean;
    };
    SetPlanTagsRequest: {
      tags?: (components["schemas"]["TagRequest"])[];
    };
    SetPlanTagsResponse: {
      tags?: (components["schemas"]["Tag"])[];
      success: boolean;
      message: string;
    };
    SetReplaceWithRequest: {
      /**
       * Format: uuid 
       * @description The plan version to replace the current version with.
       */
      replace_with: string;
    };
    SetReplaceWithResponse: {
      success: boolean;
      message: string;
    };
    SingleCustomerValue: {
      customer_id: string;
      customer_name: string;
      /** Format: double */
      value: number;
    };
    SingleDayCostAnalysis: {
      /** Format: date */
      date: string;
      cost_data: (components["schemas"]["SingleMetricCost"])[];
      /** Format: double */
      revenue: number;
    };
    SingleMetricCost: {
      metric: components["schemas"]["MetricDetail"];
      /** Format: double */
      cost: number;
    };
    SinglePaymentProcesor: {
      payment_provider_name: string;
      connected: boolean;
      /** Format: uri */
      redirect_url: string;
      self_hosted: boolean;
      connection_id: string | null;
      working: boolean;
      account_id: string | null;
    };
    SinglePlanNumCustomers: {
      plan_name: string;
      num_customers: number;
      /** Format: double */
      percent_total: number;
    };
    SingleSubstitution: {
      substitution_name: string;
      original_plan: components["schemas"]["PlanRepresentation"];
      new_plan: components["schemas"]["PlanRepresentation"];
      /** Format: double */
      pct_revenue_change: number | null;
      results: components["schemas"]["SingleSubstitutionResults"];
    };
    SingleSubstitutionResults: {
      cumulative_revenue: (components["schemas"]["RevenueDate"])[];
      revenue_by_metric: (components["schemas"]["MetricRevenue"])[];
      top_customers: components["schemas"]["TopCustomers"];
    };
    SubscriptionCategoricalFilter: {
      value: string;
      /** @description The string name of the property to filter on. Example: 'product_id' */
      property_name: string;
    };
    SubscriptionCategoricalFilterDetail: {
      value: string;
      /** @description The string name of the property to filter on. Example: 'product_id' */
      property_name: string;
    };
    SubscriptionCategoricalFilterRequest: {
      value: string;
      /** @description The string name of the property to filter on. Example: 'product_id' */
      property_name: string;
    };
    SubscriptionCustomerSummary: {
      billing_plan_name: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      end_date: string;
      /** @description Whether the subscription automatically renews. Defaults to true. */
      auto_renew?: boolean;
    };
    SubscriptionRecord: {
      subscription_id: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      start_date: string;
      /**
       * Format: date-time 
       * @description The time the subscription starts. This will be a string in yyyy-mm-dd HH:mm:ss format in UTC time.
       */
      end_date: string;
      /** @description Whether the subscription automatically renews. Defaults to true. */
      auto_renew: boolean;
      /** @description Whether this subscription came from a renewal or from a first-time. Defaults to true on creation. */
      is_new: boolean;
      subscription_filters: (components["schemas"]["SubscriptionCategoricalFilter"])[];
      customer: components["schemas"]["LightweightCustomer"];
      billing_plan: components["schemas"]["LightweightPlanVersion"];
      fully_billed: boolean;
      addons: (components["schemas"]["LightweightAddOnSubscriptionRecord"])[];
    };
    SubscriptionRecordCancelRequest: {
      /**
       * @description When canceling a subscription, the behavior used to calculate the flat fee. If null or not provided, the charge's default behavior will be used according to the subscription's start and end dates. If charge_full, the full flat fee will be charged, regardless of the duration of the subscription. If refund, the flat fee will not be charged. If charge_prorated, the prorated flat fee will be charged. 
       * @enum {string|null}
       */
      flat_fee_behavior?: "refund" | "charge_prorated" | "charge_full" | "" | null;
      /**
       * @description If bill_full, current usage will be billed on the invoice. If bill_none, current unbilled usage will be dropped from the invoice. Defaults to bill_full. 
       * @default bill_full 
       * @enum {string}
       */
      usage_behavior?: "bill_full" | "bill_none";
      /**
       * @description Whether to invoice now or invoice at the end of the billing period. Defaults to invoice now. 
       * @default invoice_now 
       * @enum {string}
       */
      invoicing_behavior?: "add_to_next_invoice" | "invoice_now";
    };
    SubscriptionRecordCreateRequest: {
      /**
       * Format: date-time 
       * @description The date the subscription starts. This should be a string in YYYY-MM-DD format of the date in UTC time.
       */
      start_date: string;
      /**
       * Format: date-time 
       * @description The date the subscription ends. This should be a string in YYYY-MM-DD format of the date in UTC time. If you don’t set it (recommended), we will use the information in the billing plan to automatically calculate this.
       */
      end_date?: string;
      /** @description Whether the subscription automatically renews. Defaults to true. */
      auto_renew?: boolean;
      is_new?: boolean;
      /** @description Add filter key, value pairs that define which events will be applied to this plan subscription. */
      subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      /** @description The id provided when creating the customer */
      customer_id: string | null;
      /**
       * Format: uuid 
       * @description The Lotus plan_id, found in the billing plan object. We will make a best-effort attempt to find the correct plan version (matching preferred currencies, prioritizing custom plans), but if more than one plan version or no plan version matches these criteria this will return an error.
       */
      plan_id?: string;
      /** @description The initial units for the plan components' prepaid fixed charges. This is only required if the plan has plan components where you did not specify the initial units. */
      component_fixed_charges_initial_units?: (components["schemas"]["ComponentsFixedChargeInitialValueRequest"])[];
    };
    SubscriptionRecordCreateSerializerOldRequest: {
      /**
       * Format: date-time 
       * @description The date the subscription starts. This should be a string in YYYY-MM-DD format of the date in UTC time.
       */
      start_date: string;
      /**
       * Format: date-time 
       * @description The date the subscription ends. This should be a string in YYYY-MM-DD format of the date in UTC time. If you don’t set it (recommended), we will use the information in the billing plan to automatically calculate this.
       */
      end_date?: string;
      /** @description Whether the subscription automatically renews. Defaults to true. */
      auto_renew?: boolean;
      is_new?: boolean;
      /** @description Add filter key, value pairs that define which events will be applied to this plan subscription. */
      subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      /** @description The id provided when creating the customer */
      customer_id: string | null;
      /**
       * Format: uuid 
       * @description The Lotus plan_id, found in the billing plan object. This field has been deprecated in favor of version_id for the sake of being explicit. If used, a best effort will be made to find the correct plan version (matching preferred currencies, prioritizing custom plans), but if more than one plan versions matches this criteria this will return an error.
       */
      plan_id?: string;
    };
    SubscriptionRecordSwitchPlanRequest: {
      /**
       * Format: uuid 
       * @description The new plan to switch to.
       */
      switch_plan_id?: string;
      /**
       * @description The invoicing behavior to use when replacing the plan. Invoice now will invoice the customer for the prorated difference of the old plan and the new plan, whereas add_to_next_invoice will wait until the end of the subscription to do the calculation. 
       * @default invoice_now 
       * @enum {string}
       */
      invoicing_behavior?: "add_to_next_invoice" | "invoice_now";
      /**
       * @description The usage behavior to use when replacing the plan. Transfer to new subscription will transfer the usage from the old subscription to the new subscription, whereas keep_separate will reset the usage to 0 for the new subscription, while keeping the old usage on the old subscription and charging for that appropriately at the end of the month. 
       * @default transfer_to_new_subscription 
       * @enum {string}
       */
      usage_behavior?: "transfer_to_new_subscription" | "keep_separate";
      /** @description The initial units for the plan components' prepaid fixed charges. In the context of swithciong plans, this is only required if the new plan has a component the old plan did not have, that has a prepaid charge, that deos not have a default. */
      component_fixed_charges_initial_units?: (components["schemas"]["ComponentsFixedChargeInitialValueRequest"])[];
    };
    SubscriptionRecordUpdateRequest: {
      /** @description Turn off auto renew for the subscription */
      turn_off_auto_renew?: boolean;
      /**
       * Format: date-time 
       * @description Change the end date for the subscription.
       */
      end_date?: string;
    };
    SubscriptionRecordUpdateSerializerOldRequest: {
      /**
       * Format: uuid 
       * @description [DEPRECATED] Will currently perform a best-effort attempt to find the correct plan version to replace the current plan with. If more than one plan version matches the criteria, this will return an error. Use the change_plan method of a subscription instance instead.
       */
      replace_plan_id?: string;
      /**
       * @description The invoicing behavior to use when replacing the plan. Invoice now will invoice the customer for the prorated difference of the old plan and the new plan, whereas add_to_next_invoice will wait until the end of the subscription to do the calculation. 
       * @default invoice_now 
       * @enum {string}
       */
      invoicing_behavior?: "add_to_next_invoice" | "invoice_now";
      /**
       * @description The usage behavior to use when replacing the plan. Transfer to new subscription will transfer the usage from the old subscription to the new subscription, whereas keep_separate will reset the usage to 0 for the new subscription, while keeping the old usage on the old subscription and charging for that appropriately at the end of the month. 
       * @default transfer_to_new_subscription 
       * @enum {string}
       */
      usage_behavior?: "transfer_to_new_subscription" | "keep_separate";
      /** @description Turn off auto renew for the subscription */
      turn_off_auto_renew?: boolean;
      /**
       * Format: date-time 
       * @description Change the end date for the subscription.
       */
      end_date?: string;
    };
    Tag: {
      tag_name: string;
      tag_hex: string;
      tag_color: string;
    };
    TagRequest: {
      tag_name: string;
      tag_hex: string;
      tag_color: string;
    };
    TargetCustomersRequest: {
      customer_ids: (string | null)[];
    };
    TimezonesResponse: {
      timezones: (string)[];
    };
    TopCustomers: {
      original_plan_revenue: (components["schemas"]["SingleCustomerValue"])[];
      new_plan_revenue: (components["schemas"]["SingleCustomerValue"])[];
      biggest_pct_increase: (components["schemas"]["SingleCustomerValue"])[];
      biggest_pct_decrease: (components["schemas"]["SingleCustomerValue"])[];
    };
    TrackEventFailure: {
      /** @enum {string} */
      success: "none";
      failed_events: {
        [key: string]: unknown | undefined;
      };
    };
    TrackEventSuccess: {
      /** @enum {string} */
      success: "all" | "some";
      failed_events: {
        [key: string]: unknown | undefined;
      };
    };
    TransferSubscriptionsFailure: {
      /** @enum {string} */
      status: "error";
      detail: string;
    };
    TransferSubscriptionsRequestRequest: {
      /** @enum {string} */
      source: "stripe" | "braintree";
      end_now: boolean;
    };
    TransferSubscriptionsSuccess: {
      /** @enum {string} */
      status: "success";
      detail: string;
    };
    UsageAlert: {
      usage_alert_id: string;
      metric: components["schemas"]["Metric"];
      plan_version: components["schemas"]["LightweightPlanVersion"];
      /** Format: double */
      threshold: number;
    };
    UsageAlertCreate: {
      /** Format: uuid */
      metric_id: string;
      /** Format: uuid */
      plan_version_id: string;
      /** Format: double */
      threshold: number;
    };
    UsageAlertCreateRequest: {
      /** Format: uuid */
      metric_id: string;
      /** Format: uuid */
      plan_version_id: string;
      /** Format: double */
      threshold: number;
    };
    UsageAlertPayloadRequest: {
      subscription: components["schemas"]["LightweightSubscriptionRecordRequest"];
      usage_alert: components["schemas"]["UsageAlertRequest"];
      /** Format: double */
      usage: number;
      /** Format: date-time */
      time_triggered: string;
    };
    UsageAlertRequest: {
      metric: components["schemas"]["MetricRequest"];
      plan_version: components["schemas"]["LightweightPlanVersionRequest"];
      /** Format: double */
      threshold: number;
    };
    UsageAlertTriggeredRequest: {
      payload: components["schemas"]["UsageAlertPayloadRequest"];
    };
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      /** Format: email */
      email: string;
      organization_name: string;
      organization_id: string;
    };
    UserRequest: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      /** Format: email */
      email: string;
      organization_name: string;
      organization_id: string;
    };
    WebhookEndpoint: {
      webhook_endpoint_id: string;
      name?: string | null;
      webhook_url: string;
      webhook_secret: string;
      triggers: readonly (components["schemas"]["WebhookTrigger"])[];
    };
    WebhookEndpointRequest: {
      name?: string | null;
      webhook_url: string;
      triggers_in: ("invoice.created" | "invoice.paid" | "invoice.past_due" | "usage_alert.triggered" | "customer.created")[];
    };
    WebhookTrigger: {
      /** @enum {string} */
      trigger_name: "invoice.created" | "invoice.paid" | "invoice.past_due" | "usage_alert.triggered" | "customer.created";
    };
    WebhookTriggerRequest: {
      /** @enum {string} */
      trigger_name: "invoice.created" | "invoice.paid" | "invoice.past_due" | "usage_alert.triggered" | "customer.created";
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  api_credits_list: {
    parameters: {
        /** @description Filter to adjustments in a specific currency */
        /** @description The id provided when creating the customer, we suggest matching with your internal customer id in your backend */
        /** @description Filter to adjustments that are effective after this date */
        /** @description Filter to adjustments that are effective before this date */
        /** @description Filter to adjustments that expire after this date */
        /** @description Filter to adjustments that expire before this date */
        /** @description Filter to adjustments that were issued after this date */
        /** @description Filter to adjustments that were issued before this date */
        /** @description Filter to a specific set of adjustment statuses. Defaults to both active and inactive. */
      query: {
        currency_code?: string;
        customer_id: string | null;
        effective_after?: string;
        effective_before?: string;
        expires_after?: string;
        expires_before?: string;
        issued_after?: string;
        issued_before?: string;
        status?: ("active" | "inactive")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["CustomerBalanceAdjustment"])[];
        };
      };
    };
  };
  api_credits_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerBalanceAdjustmentCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CustomerBalanceAdjustmentCreateRequest"];
        "multipart/form-data": components["schemas"]["CustomerBalanceAdjustmentCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CustomerBalanceAdjustment"];
        };
      };
    };
  };
  api_credits_retrieve: {
    parameters: {
        /** @description The ID of the credit to retrieve or update. */
      path: {
        credit_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerBalanceAdjustment"];
        };
      };
    };
  };
  api_credits_update_create: {
    parameters: {
        /** @description The ID of the credit to retrieve or update. */
      path: {
        credit_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomerBalanceAdjustmentUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CustomerBalanceAdjustmentUpdateRequest"];
        "multipart/form-data": components["schemas"]["CustomerBalanceAdjustmentUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerBalanceAdjustment"];
        };
      };
    };
  };
  api_credits_void_create: {
    parameters: {
        /** @description The ID of the credit to retrieve or update. */
      path: {
        credit_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerBalanceAdjustment"];
        };
      };
    };
  };
  api_customer_feature_access_list: {
    /** @deprecated */
    parameters: {
        /** @description The customer_id of the customer you want to check access. */
        /** @description Name of the feature to check access for. */
        /** @description The subscription filters that are applied to this plan's relationship with the customer. If your billing model does not have the ability multiple plans or subscriptions per customer, this is likely not relevant for you. This must be passed in as a stringified JSON object. */
      query: {
        customer_id: string | null;
        feature_name: string;
        subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["GetFeatureAccess"])[];
        };
      };
    };
  };
  api_customer_metric_access_list: {
    /** @deprecated */
    parameters: {
        /** @description The customer_id of the customer you want to check access. */
        /** @description The name of the event you are checking access for. */
        /** @description The metric_id of the metric you are checking access for. Please note that you must porovide exactly one of event_name and metric_id are mutually; a validation error will be thrown if both or none are provided. */
        /** @description The subscription filters that are applied to this plan's relationship with the customer. If your billing model does not have the ability multiple plans or subscriptions per customer, this is likely not relevant for you. This must be passed in as a stringified JSON object. */
      query: {
        customer_id: string | null;
        event_name?: string | null;
        metric_id?: string | null;
        subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["GetEventAccess"])[];
        };
      };
    };
  };
  api_customers_list: {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Customer"])[];
        };
      };
    };
  };
  api_customers_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CustomerCreateRequest"];
        "multipart/form-data": components["schemas"]["CustomerCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
  };
  api_customers_retrieve: {
    parameters: {
      path: {
        customer_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
  };
  api_customers_delete_create: {
    parameters: {
      path: {
        customer_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerDeleteResponse"];
        };
      };
    };
  };
  api_feature_access_retrieve: {
    parameters: {
        /** @description The customer_id of the customer you want to check access. */
        /** @description The feature_id of the feature you want to check access for. */
        /** @description The subscription filters that are applied to this plan's relationship with the customer. If your billing model does not have the ability multiple plans or subscriptions per customer, this is likely not relevant for you. */
      query: {
        customer_id: string | null;
        feature_id: string;
        subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureAccessResponse"];
        };
      };
    };
  };
  api_invoices_list: {
    parameters: {
        /** @description A filter for invoices for a specific customer */
        /** @description A filter for invoices with a specific payment status */
      query: {
        customer_id?: string | null;
        payment_status?: ("unpaid" | "paid")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Invoice"])[];
        };
      };
    };
  };
  api_invoices_retrieve: {
    parameters: {
      path: {
        invoice_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
  };
  api_invoices_partial_update: {
    parameters: {
      path: {
        invoice_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedInvoiceUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedInvoiceUpdateRequest"];
        "multipart/form-data": components["schemas"]["PatchedInvoiceUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceUpdate"];
        };
      };
    };
  };
  api_invoices_pdf_url_retrieve: {
    parameters: {
        /** @description Either an invoice ID (in the format `invoice_<uuid>`) or an invoice number (in the format `YYMMDD-000001`) */
      path: {
        invoice_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
  };
  api_metric_access_retrieve: {
    parameters: {
        /** @description The customer_id of the customer you want to check access. */
        /** @description The metric_id of the metric you want to check access for. */
        /** @description Used if you want to restrict the access check to only plans that fulfill certain subscription filter criteria. If your billing model does not have the ability multiple plans or subscriptions per customer, this is likely not relevant for you. */
      query: {
        customer_id: string | null;
        metric_id: string;
        subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetricAccessResponse"];
        };
      };
    };
  };
  api_ping_retrieve: {
    /** @description Ping the API to check if the API key is valid. */
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConfirmConnected"];
        };
      };
    };
  };
  api_plans_list: {
    parameters: {
        /** @description Filter to plans that have this duration. */
        /** @description Filter to plans that do not have any of the tags in this list. */
        /** @description Filter to plans that have any of the tags in this list. */
        /** @description Filter to plans that have all of the tags in this list. */
        /** @description Filter to versions that have the currency specified by this currency code. */
        /** @description Filter to versions that have this custom type. If you choose custom_only, you will only see versions that have target customers. If you choose public_only, you will only see versions that do not have target customers. */
        /** @description Filter to versions that have this status. Ended means it has an active_to date in the past. Not started means it has an active_from date in the future or null. */
      query: {
        duration?: "monthly" | "quarterly" | "yearly";
        exclude_tags?: (string)[];
        include_tags?: (string)[];
        include_tags_all?: (string)[];
        version_currency_code?: string;
        version_custom_type?: "custom_only" | "public_only" | "all";
        version_status?: ("active" | "ended" | "not_started")[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["Plan"])[];
        };
      };
    };
  };
  api_plans_retrieve: {
    parameters: {
        /** @description Filter to versions that have the currency specified by this currency code. */
        /** @description Filter to versions that have this custom type. If you choose custom_only, you will only see versions that have target customers. If you choose public_only, you will only see versions that do not have target customers. */
        /** @description Filter to versions that have this status. Ended means it has an active_to date in the past. Not started means it has an active_from date in the future or null. */
      query: {
        version_currency_code?: string;
        version_custom_type?: "custom_only" | "public_only" | "all";
        version_status?: ("active" | "ended" | "not_started")[];
      };
      path: {
        plan_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
  };
  api_subscriptions_list: {
    parameters: {
        /** @description Filter to a specific customer. */
        /** @description Filter to a specific plan. */
        /** @description If specified, will only return subscriptions with a start date before this date. */
        /** @description If specified, will only return subscriptions with an end date after this date. */
        /** @description Filter to a specific set of subscription statuses. Defaults to active. */
        /** @description Filter to a specific set of subscription filters. If your billing model only allows for one subscription per customer, you very likely do not need this field. Must be formatted as a JSON-encoded + stringified list of dictionaries, where each dictionary has a key of 'property_name' and a key of 'value'. */
      query: {
        customer_id: string | null;
        plan_id?: string;
        range_end?: string;
        range_start?: string;
        status?: ("active" | "ended" | "not_started")[];
        subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["SubscriptionRecord"])[];
        };
      };
    };
  };
  api_subscriptions_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriptionRecordCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRecordCreateRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRecordCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SubscriptionRecord"];
        };
      };
    };
  };
  api_subscriptions_retrieve: {
    parameters: {
      path: {
        subscription_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionRecord"];
        };
      };
    };
  };
  api_subscriptions_addons_cancel_create: {
    parameters: {
        /** @description The ID of the addon within the subscription update. */
        /** @description The ID of the subscription to update. */
      path: {
        addon_id: string;
        subscription_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionRecordCancelRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRecordCancelRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRecordCancelRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["AddOnSubscriptionRecord"])[];
        };
      };
    };
  };
  api_subscriptions_addons_attach_create: {
    parameters: {
        /** @description The ID of the subscription to add an addon to. */
      path: {
        subscription_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddOnSubscriptionRecordCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AddOnSubscriptionRecordCreateRequest"];
        "multipart/form-data": components["schemas"]["AddOnSubscriptionRecordCreateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AddOnSubscriptionRecord"];
        };
      };
    };
  };
  api_subscriptions_cancel_create_2: {
    parameters: {
        /** @description The ID of the subscription to cancel. */
      path: {
        subscription_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionRecordCancelRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRecordCancelRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRecordCancelRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionRecord"];
        };
      };
    };
  };
  api_subscriptions_components_change_prepaid_units_create: {
    parameters: {
        /** @description The ID of the metric to alter the prepaid usage for. */
        /** @description The ID of the subscription which will have its plans switched. */
      path: {
        metric_id: string;
        subscription_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePrepaidUnitsRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ChangePrepaidUnitsRequest"];
        "multipart/form-data": components["schemas"]["ChangePrepaidUnitsRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionRecord"];
        };
      };
    };
  };
  api_subscriptions_switch_plan_create: {
    parameters: {
        /** @description The ID of the subscription which will have its plans switched. */
      path: {
        subscription_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionRecordSwitchPlanRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRecordSwitchPlanRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRecordSwitchPlanRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionRecord"];
        };
      };
    };
  };
  api_subscriptions_update_create_2: {
    parameters: {
        /** @description The ID of the subscription to update. */
      path: {
        subscription_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionRecordUpdateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRecordUpdateRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRecordUpdateRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionRecord"];
        };
      };
    };
  };
  api_subscriptions_add_create: {
    /** @deprecated */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriptionRecordCreateSerializerOldRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRecordCreateSerializerOldRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRecordCreateSerializerOldRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionRecord"];
        };
      };
    };
  };
  api_subscriptions_cancel_create: {
    /** @deprecated */
    parameters: {
        /** @description Filter to a specific customer. */
        /** @description Filter to a specific plan. If not specified, all plans will be included in the cancellation request. */
        /** @description Filter to a specific set of subscription filters. If your billing model only allows for one subscription per customer, you very likely do not need this field. Must be formatted as a JSON-encoded + stringified list of dictionaries, where each dictionary has a key of 'property_name' and a key of 'value'. */
      query: {
        customer_id: string | null;
        plan_id?: string;
        subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionRecordCancelRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRecordCancelRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRecordCancelRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["SubscriptionRecord"])[];
        };
      };
    };
  };
  api_subscriptions_update_create: {
    parameters: {
        /** @description Filter to a specific customer. */
        /** @description Filter to a specific plan. */
        /** @description Filter to a specific set of subscription filters. If your billing model only allows for one subscription per customer, you very likely do not need this field. Must be formatted as a JSON-encoded + stringified list of dictionaries, where each dictionary has a key of 'property_name' and a key of 'value'. */
      query: {
        customer_id: string | null;
        plan_id: string;
        subscription_filters?: (components["schemas"]["SubscriptionCategoricalFilterRequest"])[];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionRecordUpdateSerializerOldRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SubscriptionRecordUpdateSerializerOldRequest"];
        "multipart/form-data": components["schemas"]["SubscriptionRecordUpdateSerializerOldRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["SubscriptionRecord"])[];
        };
      };
    };
  };
  api_track_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchEventRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchEventRequest"];
        "multipart/form-data": components["schemas"]["BatchEventRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TrackEventSuccess"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["TrackEventFailure"];
        };
      };
    };
  };
  api_verify_idems_received_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfirmIdemsReceivedRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ConfirmIdemsReceivedRequestRequest"];
        "multipart/form-data": components["schemas"]["ConfirmIdemsReceivedRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConfirmIdemsReceived"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ConfirmIdemsReceivedFailure"];
        };
      };
    };
  };
}
